import numpy as np

from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics


class MalwareDetectionRF:
    def __init__(self, num_trees: int = 100, criterion: str = 'gini', boost: bool = True, verbose: int = 0):
        """
        Constructor for Random Forest Classifier

        :param num_trees: Total number of decision trees to be constructed within the random forest
        :param criterion: Functionality for measuring the quality of tree splits
        :param boost: Determine whether or not Booststrapping techniques are used while training trees
        :param verbose: verbosity of the model
        """

        assert(verbose == 0 or verbose == 1)
        assert(criterion == 'gini' or criterion == 'entropy')
        self.__model = RandomForestClassifier(n_estimators=num_trees, criterion=criterion, bootstrap=boost,
                                              verbose=verbose)

    def train(self, x_train: np.array, y_train: np.array):
        """
        Train the Random Forest Classifier

        :param x_train: Data from training dataset
        :param y_train: Labels from training dataset corresponding to data
        :return:
        """
        assert(len(x_train) == len(y_train))

        self.__model.fit(x_train, y_train)

    def evaluate(self, x_test: np.array, y_test: np.array):
        """
        Evaluating the performance of the Random Forest Classifier on a given dataset

        :param x_test: Data from given dataset
        :param y_test: labels from given dataset
        :return:
        """
        assert(len(x_test) == len(y_test))

        return self.__model.score(x_test, y_test)

    def predict(self, data: np.array):
        """
        Make predictions on data given to model

        :param data: Data by which the model is prediction
        :return:
        """
        return self.__model.predict(data)
